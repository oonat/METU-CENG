#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Onat Ozdemir 2310399
# 
# 1) Used iaddq instead of subq and addq, reducing my CPE from 15.18 to 12.70
#
# 2) Used loop unrolling and tested the performances of groups of 4, ..., 8, 9. (well, group of 10 was 
#	exceeding the code size limit that's why I stopped at 9). The best performance belonged to the group of 9 (9 times unrolling). CPE 
#	was reduced from 12.70 to 8.62
#
# 3) To avoid data hazards, rearranged mrmovq and rmmovq instructions and avoid using these instructions consecutively if they operate 
#	on the same register. For instance, instead of using mrmovq (%rdi), %r8 and rmmovq %r8, (%rsi) consecutively, I placed another move
#	operation between them. As a result, CPE was reduced from 8.62 to 7.66
#
# 4) Also tried jump table approach for the part where I handle the remainings, but the current approach gave better results (tried it 
#	before implementing jumpq on pipe).
#
# 5) Reimplemented iaddq in pipe-full.hcl such that if iaddq is placed in after an andq instruction, 
#	it adds the given constant value depends on the result of the andq instruction. With this approach, got rid of unnecessary 
#	conditional jumps and gained extra code space. CPE was reduced from 7.66 to 6.22.
#
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

	xorq %rax,%rax		# count = 0;
	iaddq $-9, %rdx				
	jl Rcheck			# if len < 9 jump to Rcheck

L:	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9	
	mrmovq 16(%rdi), %r10
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)	
	andq %r8, %r8		
	iaddq $1, %rax		# count++

N0:	andq %r9, %r9		
	iaddq $1, %rax		# count++

N1: andq %r10, %r10		
	iaddq $1, %rax		# count++

N2: mrmovq 24(%rdi), %r8
	mrmovq 32(%rdi), %r9	
	mrmovq 40(%rdi), %r10
	rmmovq %r8, 24(%rsi)
	rmmovq %r9, 32(%rsi)
	rmmovq %r10, 40(%rsi)
	andq %r8, %r8		
	iaddq $1, %rax		# count++	

N3: andq %r9, %r9		
	iaddq $1, %rax		# count++

N4: andq %r10, %r10		
	iaddq $1, %rax		# count++

N5: mrmovq 48(%rdi), %r8
	mrmovq 56(%rdi), %r9
	mrmovq 64(%rdi), %r10
	rmmovq %r8, 48(%rsi)
	rmmovq %r9, 56(%rsi)
	rmmovq %r10, 64(%rsi)
	andq %r8, %r8		
	iaddq $1, %rax		# count++	

N6: andq %r9, %r9		
	iaddq $1, %rax		# count++

N7: andq %r10, %r10		
	iaddq $1, %rax		# count++

N8: iaddq $72, %rdi
	iaddq $72, %rsi
	iaddq $-9, %rdx		
	jge L


Rcheck:
	iaddq $9, %rdx
	jg R1
	ret

R1:	
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9	
	rmmovq %r8, (%rsi)
	andq %r8, %r8		
	iaddq $1, %rax		# count++

R2: 
	iaddq $-1, %rdx
	jg R2C
	ret

R2C:
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		
	iaddq $1, %rax		# count++

R3: 
	iaddq $-1, %rdx
	jg R3C
	ret

R3C:
	mrmovq 16(%rdi), %r8
	mrmovq 24(%rdi), %r9
	rmmovq %r8, 16(%rsi)
	andq %r8, %r8		
	iaddq $1, %rax		# count++

R4: 
	iaddq $-1, %rdx
	jg R4C
	ret

R4C:
	rmmovq %r9, 24(%rsi)	
	andq %r9, %r9		
	iaddq $1, %rax		# count++

R5: 
	iaddq $-1, %rdx
	jg R5C
	ret

R5C:
	mrmovq 32(%rdi), %r8
	mrmovq 40(%rdi), %r9
	rmmovq %r8, 32(%rsi)
	andq %r8, %r8		
	iaddq $1, %rax		# count++

R6: 
	iaddq $-1, %rdx
	jg R6C
	ret

R6C:
	rmmovq %r9, 40(%rsi)	
	andq %r9, %r9		
	iaddq $1, %rax		# count++

R7: 
	iaddq $-1, %rdx
	jg R7C
	ret

R7C:
	mrmovq 48(%rdi), %r8
	mrmovq 56(%rdi), %r9
	rmmovq %r8, 48(%rsi)
	andq %r8, %r8	
	iaddq $1, %rax		# count++

R8: 
	iaddq $-1, %rdx
	jg R8C
	ret

R8C: 
	rmmovq %r9, 56(%rsi)
	andq %r9, %r9		
	iaddq $1, %rax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
